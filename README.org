#+title Emacs configuration
#+PROPERTY: header-args:emacs-lisp :tangle ~/.emacs.d/init.el 

* Getting started
Welcome to my emacs config !

Everything is managed through babel in this file. The init.el can be generated with M-x<ret>org-babel-tangle<ret>

Rise an issue if you get a problem with it, i'll try to help whenever I'm free !

Good luck & have fun with emacs !

* Requirement
- For Vterm (linux Only)
  - libtool
  - libtool-bin
  - cmake
  - make
- For pyright 
  - python3

and obviously GNU Emacs !
* Configure MELPA
#+begin_src emacs-lisp
;; setup MELPA
(require 'package)
(setq package-archives '(("melpa" . "https://melpa.org/packages/")
			   ("elpa" . "https://elpa.gnu.org/packages/")))
(package-initialize)
(unless package-archive-contents
  (package-refresh-contents))

;; Initialize use-package on non-linux platforms
(unless (package-installed-p 'use-package)
 (package-install 'use-package))

(require 'use-package)
(setq use-package-always-ensure t)
#+end_src
* UI Configuration
** Basic UI
#+begin_src emacs-lisp 
;; Remove some stuff from UI & Startup
(scroll-bar-mode -1)
(tool-bar-mode -1)
(tooltip-mode -1)
(set-fringe-mode 10)
(menu-bar-mode -1)
(setq visible-bell t)
(setq inhibit-startup-message -1)
#+end_src

** Configure font & theme
#+begin_src emacs-lisp
;;change font & theme
(use-package all-the-icons
  :if (display-graphic-p))

(set-face-attribute 'default nil :font "FiraCode NF" :height 125)

(use-package doom-themes
  :ensure t
  :config
  (setq doom-themes-enable-bold t    ; if nil, bold is universally disabled
        doom-themes-enable-italic t) ; if nil, italics is universally disabled
  (load-theme 'doom-Iosvkem t)
(doom-themes-org-config))
  
(use-package doom-modeline
  :ensure t
  :init (doom-modeline-mode 1))
#+end_src
* Emacs Behavior

** special functions

#+begin_src emacs-lisp
    ;;##############################################
    ;;  special function  
    ;;##############################################
    (defun keyboard-escape-buffer-magic ()
      "Exit the current \"mode\" (in a generalized sense of the word).
    This command can exit an interactive command such as `query-replace',
    can clear out a prefix argument or a region,
    can get out of the minibuffer or other recursive edit,
    cancel the use of the current buffer (for special-purpose buffers)."
      (interactive)
      (cond ((eq last-command 'mode-exited) nil)
            ((region-active-p)
             (deactivate-mark))
            ((> (minibuffer-depth) 0)
             (abort-recursive-edit))
            (current-prefix-arg
             nil)
            ((> (recursion-depth) 0)
             (exit-recursive-edit))
            (buffer-quit-function
             (funcall buffer-quit-function))
            ((string-match "^ \\*" (buffer-name (current-buffer)))
             (bury-buffer))))

  (when (eq system-type 'windows-nt)
      (defun fp/ignore-wsl-acls (orig-fun &rest args)
        "Ignore ACLs on WSL. WSL does not provide an ACL, but emacs
  expects there to be one before saving any file. Without this
  advice, files on WSL can not be saved."
        (if (string-match-p "^//wsl\$/" (car args))
            (progn (message "ignoring wsl acls") "")
          (apply orig-fun args)))

      (advice-add 'file-acl :around 'fp/ignore-wsl-acls))

    ;; init.el find function
    (defun open-init-file ()
      "Open the init file."
      (interactive)
      (find-file user-init-file))
    (defun open-org-dir ()
      "Open the org directory in dired."
      (interactive)
      (dired "~/.emacs.d/org/"))
    (defun open-org-todo ()
      "Open my daily todolist."
      (interactive)
      (find-file "~/.emacs.d/org/todo.org"))
    (defun open-org-readme ()
      "Open my Readme.org used to generate my init.el with Babel"
      (interactive)
      (find-file "~/.emacs.d/org/Readme.org"))
    (defun open-wsl-dired ()
    "Open my wsl home dir"
    (interactive)
    (dired "\\\\wsl$\\Debian\\home"))

#+end_src

** Special shortcut
#+begin_src emacs-lisp

  ;;custom shorcut

    (global-set-key (kbd "<escape>") 'keyboard-escape-buffer-magic) ; Use escape instead of C-g
    (define-prefix-command 'open-short) ; Generate a command for prefix 
    (global-set-key (kbd "C-o") 'open-short) ; Assign C-o as prefix 
    (global-set-key (kbd "C-o d") 'open-org-dir) ; Open my org file dir
    (global-set-key (kbd "C-o f") 'open-init-file) ; Open my init.el
    (global-set-key (kbd "C-o t") 'open-org-todo) ; Open my todolist
    (global-set-key (kbd "C-o r") 'open-org-readme) ; Open my Readme.org
    (global-set-key (kbd "C-o b") 'org-babel-tangle) ; Execute babel tangle
    (global-set-key (kbd "C-o v") 'vterm) ; Execute vterm (linux only)
    (global-set-key (kbd "C-o e") 'eshell) ; Execute eshell (multi platform shell)
    (global-set-key (kbd "C-o w") 'open-wsl-dired) ; Open dired in my wsl home dir


    (define-prefix-command 'move-short) ; Generate a command for prefix 
    (global-set-key (kbd "C-<") 'move-short) ; Assign C-< as prefix 
    (global-set-key (kbd "C-< <up>") 'windmove-up); move up
    (global-set-key (kbd "C-< <down>") 'windmove-down); move down
    (global-set-key (kbd "C-< <left>") 'windmove-left); move left
    (global-set-key (kbd "C-< <right>") 'windmove-right); move right
    (global-set-key (kbd "C-< C-<") 'next-multiframe-window); cycle through all window across all frame

#+end_src
** Useful config
#+begin_src emacs-lisp
  ;; Some useful editor config
  (column-number-mode)
  (global-display-line-numbers-mode t)
  (dolist (mode '(org-mode-hook
                    term-mode-hook
                    eshell-mode-hook
                  vterm-mode-hook))
    (add-hook mode (lambda () (display-line-numbers-mode 0))))
  (fset 'yes-or-no-p 'y-or-n-p)
  (use-package rainbow-delimiters
    :hook (prog-mode . rainbow-delimiters-mode))
  (use-package yaml-mode)
  (add-hook 'yaml-mode-hook
            (lambda ()
              (define-key yaml-mode-map "\C-m" 'newline-and-indent)))
  (use-package which-key
    :init (which-key-mode)
    :diminish which-key-mode
    :config
    (setq which-key-idle-delay 0.3))
(setenv "PATH" (concat (getenv "PATH") ":" (expand-file-name "~/.cargo/bin")))
(setq exec-path (append exec-path (list (expand-file-name "~/.cargo/bin"))))
#+end_src
* IDE configuration
** Python
#+begin_src emacs-lisp
;; IDE for python

(use-package lsp-mode
  :init
  (setq lsp-keymap-prefix "C-l")
  :hook ((python-mode . lsp))
  :custom
  (lsp-rust-analyzer-cargo-watch-command "clippy")
  (lsp-rust-analyzer-server-display-inlay-hints t)
  :config
  (lsp-enable-which-key-integration t))
(use-package lsp-ui
  :hook (lsp-mode . lsp-ui-mode))
(use-package python-mode
  :ensure t
  :hook (python-mode . lsp-deferred))

(use-package lsp-pyright
  :ensure t
  :hook (python-mode . (lambda ()
                          (require 'lsp-pyright)
                          (lsp-deferred))))  ; or lsp-deferred
(use-package company
  :after lsp-mode
  :hook (lsp-mode . company-mode)
  :bind (:map company-active-map
	      ("<tab>" . company-complete-selection))
  :custom
  (company-minimum-prefix-lenght 1)
  (company-idle-delay 0.0))
#+end_src
** HCL
#+begin_src emacs-lisp
(use-package hcl-mode)
#+end_src
** Rust
#+begin_src emacs-lisp
(use-package rustic
  :ensure
  :bind (:map rustic-mode-map
              ("M-j" . lsp-ui-imenu)
              ("M-?" . lsp-find-references)
              ("C-c C-c l" . flycheck-list-errors)
              ("C-c C-c a" . lsp-execute-code-action)
              ("C-c C-c r" . lsp-rename)
              ("C-c C-c q" . lsp-workspace-restart)
              ("C-c C-c Q" . lsp-workspace-shutdown)
              ("C-c C-c s" . lsp-rust-analyzer-status))
  :config
  ;; uncomment for less flashiness
  ;; (setq lsp-eldoc-hook nil)
  ;; (setq lsp-enable-symbol-highlighting nil)
  ;; (setq lsp-signature-auto-activate nil)

  ;; comment to disable rustfmt on save
  (setq rustic-format-on-save t)
  (add-hook 'rustic-mode-hook 'rk/rustic-mode-hook))

(defun rk/rustic-mode-hook ()
  ;; so that run C-c C-c C-r works without having to confirm, but don't try to
  ;; save rust buffers that are not file visiting. Once
  ;; https://github.com/brotzeit/rustic/issues/253 has been resolved this should
  ;; no longer be necessary.
  (when buffer-file-name
    (setq-local buffer-save-without-query t)))
#+end_src
* Org mode
** org & org-bullet setup
#+begin_src emacs-lisp
;; org setup
(defun org-mode-setup ()
  (org-indent-mode)
  (auto-fill-mode 0)
  (visual-line-mode 1))

(use-package org
  :hook (org-mode . org-mode-setup)
  :config
  (setq org-ellipsis " "
	org-hide-emphasis-markers t)
  (setq org-agenda-files '("~/.emacs.d/org/todo.org"))
  (setq org-agenda-start-with-log-mode t)
  (setq org-log-done 'time)
  (setq org-log-into-drawer t)
  (setq org-todo-keywords
	'((sequence "TODO(t)" "ONGOING(o)" "|" "DONE(d!)")
	  (sequence "BACKLOG(b)" "READY(r)" "REVIEW(v)" "HOLD(h)" "|" "COMPLETED(c)"
          "CANCELED(k)"))))

(use-package org-bullets
  :after org
  :hook (org-mode . org-bullets-mode)
  :custom
  (org-bullets-bullet-list '("\u200b")))

(defun org-mode-visual-fill ()
  (setq visual-fill-column-width 120
	visual-fill-column-center-text t)
  (visual-fill-column-mode 1))

(use-package visual-fill-column
  :hook (org-mode . org-mode-visual-fill))
#+end_src
** Org-babel
#+begin_src emacs-lisp
    (org-babel-do-load-languages
     'org-babel-load-languages
     '((emacs-lisp . t)
       (python . t)))
    (setq org-confirm-babel-evaluate nil)

    (require 'org-tempo)
    (add-to-list 'org-structure-template-alist '("sh" . "src shell"))
    (add-to-list 'org-structure-template-alist '("el" . "src emacs-lisp"))
    (add-to-list 'org-structure-template-alist '("py" . "src python"))

#+end_src
** Auto-tangle Configuration file
#+begin_src emacs-lisp
;; Automatically tangle Readme.org config file when we save it
(defun org-babel-tangle-config ()
 (when (string-equal (buffer-file-name)
                     (expand-file-name "~/.emacs.d/org/Readme.org"))
;; Dynamic scoping
   (let ((org-confirm-babel-evaluate nil))
     (org-babel-tangle))))
(add-hook 'org-mode-hook (lambda () (add-hook 'after-save-hook #'org-babel-tangle-config)))

#+end_src 
* Emacs Application Framework
** Install dependencies manually

git clone --depth=1 -b master https://github.com/emacs-eaf/emacs-application-framework.git ~/.emacs.d/site-lisp/emacs-application-framework/
cd emacs-application-framework
chmod +x ./install-eaf.py
./install-eaf.py
** Load EAF
#+begin_src emacs-lisp
(use-package eaf
  :load-path "~/.emacs.d/site-lisp/emacs-application-framework"
  :custom
  ; See https://github.com/emacs-eaf/emacs-application-framework/wiki/Customization
  (eaf-browser-continue-where-left-off t)
  (eaf-browser-enable-adblocker t)
  (browse-url-browser-function 'eaf-open-browser)
  :config
  (defalias 'browse-web #'eaf-open-browser)
  (with-eval-after-load
  (eaf-bind-key scroll_up "C-n" eaf-pdf-viewer-keybinding)
  (eaf-bind-key scroll_down "C-p" eaf-pdf-viewer-keybinding)
  (eaf-bind-key take_photo "p" eaf-camera-keybinding)
  (eaf-bind-key nil "M-q" eaf-browser-keybinding))) ;; unbind, see more in the Wiki
#+end_src

** Loading App
#+begin_src emacs-lisp
(require 'eaf-system-monitor)
(require 'eaf-terminal)
(require 'eaf-markdown-previewer)
(require 'eaf-file-sender)
(require 'eaf-music-player)
(require 'eaf-mindmap)
(require 'eaf-airshare)
(require 'eaf-org-previewer)
(require 'eaf-camera)
(require 'eaf-browser)
(require 'eaf-video-player)
(require 'eaf-image-viewer)
(require 'eaf-pdf-viewer)
(require 'eaf-file-browser)
(require 'eaf-rss-reader)
(require 'eaf-file-manager)
#+end_src
* Terminals
For terminal integration in emacs I recommends this [[https://www.youtube.com/watch?v=wa_wZIuT9Vw][video from System Crafters]].
My configs below are barebones though sufficient for my use case.
** vterm
#+begin_src emacs-lisp
(use-package vterm
 :commands vterm
 :config 
 (setq vterm-max-scrollback 10000))
#+end_src

** eshell
#+begin_src emacs-lisp
(use-package eshell-git-prompt)
(use-package eshell
  :config
  (eshell-git-prompt-use-theme 'powerline)
  (setq eshell-history-size         10000
        eshell-buffer-maximum-lines 10000
        eshell-hist-ignoredups t
        eshell-scroll-to-bottom-on-input t))
        #+end_src
* Config added by Custom

#+begin_src emacs-lisp
(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(package-selected-packages
   '(lsp-ui company doom-themes which-key visual-fill-column use-package rainbow-delimiters pippel org-bullets nord-theme lsp-jedi doom-modeline))
 '(python-shell-interpreter "python3")
 '(vc-follow-symlinks t))
(custom-set-faces
 ;; custom-set-faces was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 )
#+end_src
